# Copyright (c) 2020 Feng Cong
# 
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test", "cc_binary")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

config_setting(
    name = "with_gflags",
    values = {"define": "with_gflags=1"},
)

# config_setting(
#     name = "has_absl",
#     values = {"define": "absl=1"},
# )

cc_library(
    name = "argparse",
    srcs = [
        "argparse/argparse-open-mode.cc",
        "argparse/internal/argparse-argp-parser.cc",
        "argparse/internal/argparse-info.cc",
        "argparse/internal/argparse-port.cc",
        "argparse/internal/argparse-argument-builder.cc",
        "argparse/internal/argparse-argument.cc",
        "argparse/internal/argparse-argument-controller.cc",
        "argparse/internal/argparse-argument-container.cc",
        "argparse/internal/argparse-argument-holder.cc",
    ] + select({
        ":with_gflags": [ "argparse/internal/argparse-gflags-parser.cc", ],
        "//conditions:default": [],
    }),

    hdrs = [
        "argparse/internal/argparse-any.h",
        "argparse/internal/argparse-arg-array.h",
        "argparse/internal/argparse-argp-parser.h",
        "argparse/internal/argparse-info.h",
        "argparse/internal/argparse-internal.h",
        "argparse/internal/argparse-ops-result.h",
        "argparse/internal/argparse-numeric-parser.h",
        "argparse/internal/argparse-opaque-ptr.h",
        "argparse/internal/argparse-operations.h",
        "argparse/internal/argparse-port.h",
        "argparse/internal/argparse-argument-builder.h",
        "argparse/internal/argparse-subcommand.h",
        "argparse/internal/argparse-argument.h",
        "argparse/internal/argparse-argument-holder.h",
        "argparse/internal/argparse-argument-container.h",
        "argparse/internal/argparse-argument-controller.h",
        "argparse/internal/argparse-argument-parser.h",
        "argparse/argparse-open-mode.h",
        "argparse/argparse-builder.h",
        "argparse/argparse-conversion-result.h",
        "argparse/argparse-traits.h",
        "argparse/argparse.h",
    ] + select({
        ":with_gflags": [ "argparse/internal/argparse-gflags-parser.h" ],
        "//conditions:default": [],
    }),

    includes = [
        "argparse/",
    ],

    deps = [
        "@com_google_absl//absl/meta:type_traits",
        "@com_google_absl//absl/utility",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/container:inlined_vector",
    ] + select({
        ":with_gflags": ["@gflags//:gflags"],
        "//conditions:default": [],
    }),
)

cc_test(
    name  = "argparse_test",
    size = "small",
    srcs = [
        "argparse/argparse-builder_test.cc",
        "argparse/argparse-test-helper.h",
        "argparse/argparse-conversion-result_test.cc",
        "argparse/internal/argparse-opaque-ptr_test.cc",
    ],
    linkstatic = 0,
    deps = [
        ":argparse",
        "@gtest//:gtest_main",
    ]
)

cc_binary(
    name = "test_main",
    srcs = ["test_main.cc"],
    deps = [":argparse"],
)
